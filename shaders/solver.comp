#version 430

layout(local_size_x = 256) in;


layout(std430, binding = 0) buffer PositionBuffer {
    vec2 positions[];
};

layout(std430, binding = 1) buffer VelocityBuffer {
    vec2 velocities[];
};

uniform float dt;
uniform float viewWidth;
uniform float radius;
vec2 gravity = vec2(0.0, -9.8);



float viewHeight = viewWidth * 720.0 / 1280.0;

vec3 boundaries[] = vec3[](
    vec3(-1.0, 0.0, -viewWidth),
    vec3(0.0, -1.0, -viewHeight),
    vec3(1.0, 0.0, 0.0),
    vec3(0.0, 1.0, 0.0)
);




void ExternalForces(uint index) {
    velocities[index] += gravity * dt;
}

void Integrate(uint index) {
    positions[index] += velocities[index] * dt;
}

void BoundaryCheck(uint index) {
    vec2 position = positions[index];
    vec2 velocity = velocities[index];

    for (int i = 0; i < boundaries.length(); i++){
        vec3 boundary = boundaries[i];
        vec2 normal = boundary.xy;
        float distance = dot(position, normal) - boundary.z;
        if ((distance = max(distance, 0.0)) < radius){
            velocity += (radius - distance) * normal / dt;
        }
    }

    velocities[index] = velocity;
}


void main(){
    uint index = gl_GlobalInvocationID.x;
    if (index >= positions.length()) return;

    for (int i = 0; i < 10; i++){
        ExternalForces(index);
        barrier();

        Integrate(index);
        barrier();

        BoundaryCheck(index);
        barrier();
    }

}