#version 430 core

layout(local_size_x = 256) in;

layout (std430, binding = 0) buffer Pos { vec2 pos[]; };
layout (std430, binding = 1) buffer Vel { vec2 vel[]; };

// -----------------------Uniforms-----------------------
uniform float dt;
uniform float viewWidth;
uniform float radius;

// ------------------------------------------------------

float viewHeight = viewWidth * 720.0 / 1280.0;

vec3 boundaries[] = vec3[](
    vec3(-1.0, 0.0, -viewWidth),
    vec3(0.0, -1.0, -viewHeight),
    vec3(1.0, 0.0, 0.0),
    vec3(0.0, 1.0, 0.0)
);

void main(){
    uint index = gl_GlobalInvocationID.x;

    if (index >= pos.length()) return;


    vec2 position = pos[index];
    vec2 velocity = vel[index];

    for (int i = 0; i < boundaries.length(); i++){
        vec3 boundary = boundaries[i];
        vec2 normal = boundary.xy;
        float distance = dot(position, normal) - boundary.z;
        if ((distance = max(distance, 0.0)) < radius){
            velocity += (radius - distance) * normal / dt;
        }
    }

    vel[index] = velocity;
}